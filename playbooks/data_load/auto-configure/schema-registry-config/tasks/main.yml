#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
### GET SCHEMA_REGISTRY CONFIGS ###

- set_fact:
    sr_service_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'SCHEMAREGISTRY'].name | [0]"

- name: DEBUG - sr_service_name
  debug:
    msg: "{{ sr_service_name }}"
  when: debug | default(false)

- name: Get SR roles repartition
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/{{ sr_service_name }}/roles"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
    dest: /tmp/sr_roles.json
  register: sr_roles

- name: Get SR full config
  uri:
    url: "{{ cloudera_manager_url }}/api/v31/clusters/{{ cluster_name }}/services/{{ sr_service_name }}/roleConfigGroups/{{ sr_service_name }}-SCHEMA_REGISTRY_SERVER-BASE/config?view=full"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: sr_full_config
 

### SET SCHEMA_REGISTRY CONFIGS ###

- set_fact:
    sr_tls: "{{ sr_full_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'ssl_enabled'].value | [0]"

- set_fact:
    sr_tls: "{{ sr_full_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'ssl_enabled'].default | [0]"
  when: sr_tls == ""

- name: DEBUG - sr_tls
  debug:
    msg: "{{ sr_tls }}"
  when: debug | default(false)


- set_fact:
    sr_port: "{{ sr_full_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'schema.registry.ssl.port'].value | [0]"
  when: sr_tls

- set_fact:
    sr_port: "{{ sr_full_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'schema.registry.ssl.port'].default | [0]"
  when: sr_tls and sr_port == ""

- set_fact:
    sr_port: "{{ sr_full_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'schema.registry.port'].value | [0]"
  when: not sr_tls

- set_fact:
    sr_port: "{{ sr_full_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'rschema.registry.port'].default | [0]"
  when: not sr_tls and sr_port == ""

- name: DEBUG - sr_port
  debug:
    msg: "{{ sr_port }}"
  when: debug | default(false)



# Set SR url

- set_fact:
    sr_hosts: "{{ sr_roles.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'SCHEMA_REGISTRY_SERVER'].hostRef.hostname"

- name: DEBUG - sr_hosts
  debug:
    msg: "{{ sr_hosts }}"
  when: debug | default(false)

- set_fact:
    sr_url: "{% for host in sr_hosts %}{{ host }}:{{ sr_port }}{% if not loop.last %},{% endif %}{% endfor %}"

- name: DEBUG - sr_url
  debug:
    msg: "{{ sr_url }}"
  when: debug | default(false)
  

  