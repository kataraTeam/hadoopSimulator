#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
### GET KUDU CONFIGS ###

- set_fact:
    zk_service_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'ZOOKEEPER'].name | [0]"

- name: DEBUG - zk_service_name
  debug:
    msg: "{{ zk_service_name }}"
  when: debug | default(false)


- name: Get ZK full config
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/{{ zk_service_name }}/config?view=full"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
    dest: /tmp/zk_full_config.json
  register: zk_full_config

- name: Get ZK Server full config
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/{{ zk_service_name }}/roleConfigGroups/{{ zk_service_name }}-SERVER-BASE/config?view=full"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
    dest: /tmp/zk_server_full_config.json
  register: zk_server_full_config

- name: Get ZK roles repartition
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/{{ zk_service_name }}/roles"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
    dest: /tmp/zk_roles.json
  register: zk_roles

 
### SET ZK CONFIGS ###

# Set ZK port

- set_fact:
    zk_port: "{{ zk_server_full_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'clientPort'].value | [0]"

- set_fact:
    zk_port: "{{ zk_server_full_config.json | community.general.json_query(query) }}"
  vars:
    query: "items[?name == 'clientPort'].default | [0]"
  when: zk_port == ""

- name: DEBUG - zk_port
  debug:
    msg: "{{ zk_port }}"
  when: debug | default(false)


# Set ZK Quorum

- set_fact:
    zk_hosts: "{{ zk_roles.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'SERVER'].hostRef.hostname"

- name: DEBUG - zk_hosts
  debug:
    msg: "{{ zk_hosts }}"
  when: debug | default(false)

- set_fact:
    zk_quorum: "{% for host in zk_hosts %}{{ host }}{% if not loop.last %},{% endif %}{% endfor %}"

- set_fact:
    zk_quorum_with_port: "{% for host in zk_hosts %}{{ host }}:{{ zk_port }}{% if not loop.last %},{% endif %}{% endfor %}"

- name: DEBUG - zk_quorum_with_port
  debug:
    msg: "{{ zk_quorum_with_port }}"
  when: debug | default(false)
  

  
