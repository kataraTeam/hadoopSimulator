#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
# Set optionnal configs if not set
- set_fact:
    github_url: "https://github.com/frischHWC/random-datagen"
  when: github_url is not defined

- name: DEBUG - github_url
  debug:
    msg: "{{ github_url }}"
  when: debug | default(false)

- set_fact:
    hadoop_user: "{{ default_user }}"
  when: hadoop_user is not defined

- name: DEBUG - hadoop_user
  debug:
    msg: "{{ hadoop_user }}"
  when: debug | default(false)

- set_fact:
    hadoop_home: "/user/dev"
  when: hadoop_home is not defined

- name: DEBUG - hadoop_home
  debug:
    msg: "{{ hadoop_home }}"
  when: debug | default(false)

- set_fact:
    user: "{{ kerb_user.split('@')[0] }}"
  when: user is not defined and kerb_auth and kerb_user is defined

- set_fact:
    user: "dev"
  when: user is not defined and not kerb_auth

- name: DEBUG - user
  debug:
    msg: "{{ user }}"
  when: debug | default(false)


# Check which services are deployed and available to setup the gen_<Service> vars

- set_fact:
    gen_hdfs: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'HDFS'].serviceState | [0]"
  when: gen_hdfs is not defined

- name: DEBUG - gen_hdfs
  debug:
    msg: "{{ gen_hdfs }}"
  when: debug | default(false)

- set_fact:
    gen_hbase: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'HBASE'].serviceState | [0]"
  when: gen_hbase is not defined

- name: DEBUG - gen_hbase
  debug:
    msg: "{{ gen_hbase }}"
  when: debug | default(false)

- set_fact:
    gen_hive: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'HIVE'].serviceState | [0]"
  when: gen_hive is not defined

- name: DEBUG - gen_hive
  debug:
    msg: "{{ gen_hive }}"
  when: debug | default(false)

- set_fact:
    gen_solr: "{{ true if ((cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED') and ((cloudera_manager_all_services.json | community.general.json_query(query2)) > 1) else false }}"
  vars:
    query: "items[?type == 'SOLR'].serviceState | [0]"
    query2: "items[?type == 'SOLR'].serviceState | length(@) "
  when: gen_solr is not defined

- name: DEBUG - gen_solr
  debug:
    msg: "{{ gen_solr }}"
  when: debug | default(false)

- set_fact:
    gen_ozone: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'OZONE'].serviceState | [0]"
  when: gen_ozone is not defined

- name: DEBUG - gen_ozone
  debug:
    msg: "{{ gen_ozone }}"
  when: debug | default(false)

- set_fact:
    gen_kafka: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'KAFKA'].serviceState | [0]"
  when: gen_kafka is not defined

- name: DEBUG - gen_kafka
  debug:
    msg: "{{ gen_kafka }}"
  when: debug | default(false)

- set_fact:
    gen_kudu: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'KUDU'].serviceState | [0]"
  when: gen_kudu is not defined

- name: DEBUG - gen_kudu
  debug:
    msg: "{{ gen_kudu }}"
  when: debug | default(false)

- set_fact:
    sr_service_exists: "{{ cloudera_manager_all_services.json | community.general.json_query(query) | length > 0 }}"
  vars:
    query: "items[?type == 'SCHEMAREGISTRY'].name"

- name: DEBUG - Schema Registry exists
  debug:
    msg: "{{ sr_service_exists }}"
  when: debug | default(false)

# Check which services need to be configured
- set_fact:
    config_solr: "{{ true if gen_solr and solr_url is not defined else false }}"

- name: DEBUG - config_solr
  debug:
    msg: "{{ config_solr }}"
  when: debug | default(false)

- set_fact:
    config_ranger: "{{ true if ranger_url is not defined else false }}" 

- name: DEBUG - config_ranger
  debug:
    msg: "{{ config_ranger }}"
  when: debug | default(false)

- set_fact:
    config_zookeeper: "{{ true if gen_kafka or gen_hbase or gen_hive and zk_quorum_with_port is not defined else false }}"  

- name: DEBUG - config_zookeeper
  debug:
    msg: "{{ config_zookeeper }}"
  when: debug | default(false)

- set_fact:
    config_kudu: "{{ true if gen_kudu and kudu_url is not defined else false }}"  

- name: DEBUG - config_kudu
  debug:
    msg: "{{ config_kudu }}"
  when: debug | default(false)

- set_fact:
    config_kafka: "{{ true if gen_kafka and (kafka_url is not defined or kafka_protocol is not defined) else false }}"  

- name: DEBUG - config_kafka
  debug:
    msg: "{{ config_kafka }}"
  when: debug | default(false)

- set_fact:
    config_schema_registry: "{{ true if gen_kafka and sr_service_exists and sr_url is not defined else false }}"  

- name: DEBUG - config_schema_registry
  debug:
    msg: "{{ config_schema_registry }}"
  when: debug | default(false)

- set_fact:
    config_ozone: "{{ true if gen_ozone and ozone_service_id is not defined else false }}"  

- name: DEBUG - config_ozone
  debug:
    msg: "{{ config_ozone }}"
  when: debug | default(false)

- set_fact:
    config_hdfs: "{{ true if gen_hdfs and hdfs_nameservice is not defined else false }}"  

- name: DEBUG - config_hdfs
  debug:
    msg: "{{ config_hdfs }}"
  when: debug | default(false)

- set_fact:
    config_hbase: "{{ true if gen_hbase and hbase_znode is not defined else false }}"  

- name: DEBUG - config_hbase
  debug:
    msg: "{{ config_hbase }}"
  when: debug | default(false)

- set_fact:
    config_hive: "{{ true if gen_hive and ( tez_queue_name is not defined or hive_zk_namespace is not defined ) else false }}"  

- name: DEBUG - config_hive
  debug:
    msg: "{{ config_hive }}"
  when: debug | default(false)


# Set exists variables
- set_fact:
    solr_exists: "{{ true if ((cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED') and ((cloudera_manager_all_services.json | community.general.json_query(query2)) > 1) else false }}"
  vars:
    query: "items[?type == 'SOLR'].serviceState | [0]"
    query2: "items[?type == 'SOLR'].serviceState | length(@) "

- name: DEBUG - solr_exists
  debug:
    msg: "{{ solr_exists }}"
  when: debug | default(false)

- set_fact:
    solr_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'SOLR' && name != 'infra_solr'].name | [0]"

- set_fact:
    solr_name: ""
  when: not solr_exists

- name: DEBUG - solr_name
  debug:
    msg: "{{ solr_name }}"
  when: debug | default(false)


- set_fact:
    ozone_exists: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'OZONE'].serviceState | [0]"

- name: DEBUG - ozone_exists
  debug:
    msg: "{{ ozone_exists }}"
  when: debug | default(false)

- set_fact:
    ozone_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'OZONE'].name | [0]"

- set_fact:
    ozone_name: ""
  when: not ozone_exists

- name: DEBUG - ozone_name
  debug:
    msg: "{{ ozone_name }}"
  when: debug | default(false)


- set_fact:
    kudu_exists: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'KUDU'].serviceState | [0]"

- name: DEBUG - kudu_exists
  debug:
    msg: "{{ kudu_exists }}"
  when: debug | default(false)

- set_fact:
    kudu_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'KUDU'].name | [0]"

- set_fact:
    kudu_name: ""
  when: not kudu_exists

- name: DEBUG - kudu_name
  debug:
    msg: "{{ kudu_name }}"
  when: debug | default(false)


- set_fact:
    kafka_exists: "{{ true if (cloudera_manager_all_services_streaming.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'KAFKA'].serviceState | [0]"

- name: DEBUG - kafka_exists
  debug:
    msg: "{{ kafka_exists }}"
  when: debug | default(false)

- set_fact:
    kafka_name: "{{ cloudera_manager_all_services_streaming.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'KAFKA'].name | [0]"

# When using a streaming cluster, kafka link should not be made
- set_fact:
    kafka_name: ""
  when: not kafka_exists or cluster_name_streaming != cluster_name

- name: DEBUG - kafka_name
  debug:
    msg: "{{ kafka_name }}"
  when: debug | default(false)


- set_fact:
    sr_exists: "{{ cloudera_manager_all_services_streaming.json | community.general.json_query(query) | length > 0 }}"
  vars:
    query: "items[?type == 'SCHEMAREGISTRY'].name"

- name: DEBUG - sr_exists
  debug:
    msg: "{{ sr_exists }}"
  when: debug | default(false)

- set_fact:
    sr_name: "{{ cloudera_manager_all_services_streaming.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'SCHEMAREGISTRY'].name | [0]"

# When using a streaming cluster, schema registry link should not be made
- set_fact:
    sr_name: ""
  when: not sr_exists or cluster_name_streaming != cluster_name

- name: DEBUG - sr_name
  debug:
    msg: "{{ sr_name }}"
  when: debug | default(false)



- set_fact:
    ranger_exists: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'RANGER'].serviceState | [0]"

- name: DEBUG - ranger_exists
  debug:
    msg: "{{ ranger_exists }}"
  when: debug | default(false)

- set_fact:
    ranger_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'RANGER'].name | [0]"

- set_fact:
    ranger_name: ""
  when: not ranger_exists

- name: DEBUG - ranger_name
  debug:
    msg: "{{ ranger_name }}"
  when: debug | default(false)



- set_fact:
    hdfs_exists: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'HDFS'].serviceState | [0]"

- name: DEBUG - hdfs_exists
  debug:
    msg: "{{ hdfs_exists }}"
  when: debug | default(false)

- set_fact:
    hdfs_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'HDFS'].name | [0]"

- set_fact:
    hdfs_name: ""
  when: not hdfs_exists

- name: DEBUG - hdfs_name
  debug:
    msg: "{{ hdfs_name }}"
  when: debug | default(false)


- set_fact:
    hbase_exists: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'HBASE'].serviceState | [0]"

- name: DEBUG - hbase_exists
  debug:
    msg: "{{ hbase_exists }}"
  when: debug | default(false)

- set_fact:
    hbase_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'HBASE'].name | [0]"

- set_fact:
    hbase_name: ""
  when: not hbase_exists

- name: DEBUG - hbase_name
  debug:
    msg: "{{ hbase_name }}"
  when: debug | default(false)

- set_fact:
    hive_exists: "{{ true if (cloudera_manager_all_services.json | community.general.json_query(query)) == 'STARTED' else false }}"
  vars:
    query: "items[?type == 'HIVE'].serviceState | [0]"

- name: DEBUG - hive_exists
  debug:
    msg: "{{ hive_exists }}"
  when: debug | default(false)

- set_fact:
    hive_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'HIVE'].name | [0]"

- set_fact:
    hive_name: ""
  when: not hive_exists

- name: DEBUG - hive_name
  debug:
    msg: "{{ hive_name }}"
  when: debug | default(false)
