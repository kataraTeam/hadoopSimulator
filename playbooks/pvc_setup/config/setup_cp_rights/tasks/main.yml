#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
- set_fact:
    iam_endpoint_api: "{{ cdp_endpoint_url }}/api/v1/iam"

- set_fact:
    env_endpoint_api: "{{ cdp_endpoint_url }}/api/v1/environments2"

# First we need to connect with the user to the environment (to upload it to Control Plane)
- name: Get Local Account ID
  uri:
    url: "{{ cdp_endpoint_url }}/authenticate/login?loginRedirect={{ cdp_endpoint_url }}/commonconsole"
    method: GET
    headers: 
      Cookie: "{{ first_cookie }}"
    status_code: [200, 302, 303]
    return_content: yes
    validate_certs: no
    body_format: json
    follow_redirects: no
  register: pvc_call_for_accountid_user

- set_fact:
    account_id_user: "{{ pvc_call_for_accountid_user.location.split('accountId=')[1].split('&')[0] }}" 

- name: DEBUG - account_id_user
  debug:
    msg: "{{ account_id_user }}"
  when: debug | default(false)

- set_fact:
    ldap_connector_id: "{{ pvc_call_for_accountid_user.location.split('idpConnectorId=')[1].split('&')[0] }}" 

- name: DEBUG - ldap_connector_id
  debug:
    msg: "{{ ldap_connector_id }}"
  when: debug | default(false)

- name: Auth to CP with user 
  uri:
    url: "{{ cdp_endpoint_url }}/authenticate/callback/ldap?accountId={{ account_id_user }}&idpConnectorId={{ ldap_connector_id }}&loginRedirect={{ cdp_endpoint_url }}/commonconsole"
    method: POST
    headers: 
      Cookie: "{{ first_cookie }}"
    body: "username={{ user.name }}&password={{ user.password }}"
    status_code: [200, 302, 303]
    return_content: yes
    validate_certs: no
    follow_redirects: no
  register: pvc_call_for_authcookie_user

# Get user CRN

- name: List all users
  uri:
    url: "{{ iam_endpoint_api }}/listUsers"
    method: POST
    headers: 
      Content-Type: application/json
      Cookie: "{{ all_cookies }}"
    body: "{\"pageSize\":500}"
    status_code: 200
    return_content: yes
    validate_certs: no
  register: list_users

- set_fact:
    user_crn: "{{ list_users.json | community.general.json_query(query) }}"
  vars:
    query: "users[?workloadUsername == '{{ user.name }}' ].crn | [0]"

- name: DEBUG - user_crn
  debug:
    msg: "{{ user_crn }}"
  when: debug | default(false)

# Assign Roles for a user

- name: Assign user role
  uri:
    url: "{{ iam_endpoint_api }}/assignUserRole"
    method: POST
    headers: 
      Content-Type: application/json
      Cookie: "{{ all_cookies }}"
      Accept: application/json
    body_format: json
    body: "{{ lookup('template', 'assign_role.json') }}"
    status_code: [200, 409]
    return_content: yes
    validate_certs: no
  with_items: "{{ user.roles }}"
  loop_control:
    loop_var: user_role


# Assign Roles per env for a user

- name: Set rights for Environment
  include_tasks: "env_rights.yml"
  with_items: "{{ user.envs }}"
  loop_control:
    loop_var: env