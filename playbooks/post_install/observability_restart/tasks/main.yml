#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
---
# Restart telemetry publisher
- name: Restart Telemetry Publisher
  uri:
    url: "{{ cloudera_manager_base_api_url }}/cm/service/roleCommands/restart"
    user: "{{ cloudera_manager_base_user }}"
    password: "{{ cloudera_manager_base_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    validate_certs: no
    body_format: json
    body: "{{ lookup('template', 'restart_telemetry.json') }}"
  when: configure_observability_with_base


# Restart Services in Base cluster

- name: Get All Clusters from CM
  uri:
    url: "{{ cloudera_manager_base_api_url }}/clusters/"
    user: "{{ cloudera_manager_base_user }}"
    password: "{{ cloudera_manager_base_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cloudera_manager_all_clusters
  when: configure_observability_with_base

- set_fact:
    cluster_base_name: "{{ cloudera_manager_all_clusters.json | community.general.json_query(query) }}"
  vars:
    query: "items[?clusterType == 'BASE_CLUSTER'].name[?contains(@, 'kts') == `false` ] | [0]"
  when: configure_observability_with_base

- name: DEBUG - cluster_base_name
  debug:
    msg: "{{ cluster_base_name }}"
  when: debug | default(false) and configure_observability_with_base

- name: Get All services from CM
  uri:
    url: "{{ cloudera_manager_base_api_url }}/clusters/{{ cluster_base_name }}/services/"
    user: "{{ cloudera_manager_base_user }}"
    password: "{{ cloudera_manager_base_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: cloudera_manager_all_services
  when: configure_observability_with_base

- set_fact:
    hive_service_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'HIVE'].name | [0]"
  when: configure_observability_with_base

- name: DEBUG - hive_service_name
  debug:
    msg: "{{ hive_service_name }}"
  when: debug | default(false) and configure_observability_with_base

- set_fact:
    hive_on_tez_service_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'HIVE_ON_TEZ'].name | [0]"
  when: configure_observability_with_base

- name: DEBUG - hive_on_tez_service_name
  debug:
    msg: "{{ hive_on_tez_service_name }}"
  when: debug | default(false) and configure_observability_with_base

- set_fact:
    spark_service_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'SPARK_ON_YARN'].name | [0]"
  when: configure_observability_with_base

- name: DEBUG - spark_service_name
  debug:
    msg: "{{ spark_service_name }}"
  when: debug | default(false) and configure_observability_with_base

- set_fact:
    impala_service_name: "{{ cloudera_manager_all_services.json | community.general.json_query(query) }}"
  vars:
    query: "items[?type == 'IMPALA'].name | [0]"
  when: configure_observability_with_base

- name: DEBUG - impala_service_name
  debug:
    msg: "{{ impala_service_name }}"
  when: debug | default(false) and configure_observability_with_base


# Restart all base services

- name: Restart Hive service
  uri:
    url: "{{ cloudera_manager_base_api_url }}/clusters/{{ cluster_base_name }}/services/{{ hive_service_name }}/commands/restart"
    user: "{{ cloudera_manager_base_user }}"
    password: "{{ cloudera_manager_base_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    validate_certs: no
    body_format: json
  when: configure_observability_with_base and hive_service_name != ''

- name: Pause to let CM acknowledges restart
  pause:
    seconds: 5
  when: configure_observability_with_base and hive_service_name != ''

- name: Check Hive is up and running
  uri:
    url: "{{ cloudera_manager_base_api_url }}/clusters/{{ cluster_base_name }}/services/{{ hive_service_name }}"
    user: "{{ cloudera_manager_base_user }}"
    password: "{{ cloudera_manager_base_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: result
  until: result.json.serviceState == "STARTED"
  retries: 60
  delay: 10
  when: configure_observability_with_base and hive_service_name != ''

- name: Restart Hive on Tez service
  uri:
    url: "{{ cloudera_manager_base_api_url }}/clusters/{{ cluster_base_name }}/services/{{ hive_on_tez_service_name }}/commands/restart"
    user: "{{ cloudera_manager_base_user }}"
    password: "{{ cloudera_manager_base_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    validate_certs: no
    body_format: json
  when: configure_observability_with_base and hive_on_tez_service_name != ''

- name: Pause to let CM acknowledges restart
  pause:
    seconds: 5
  when: configure_observability_with_base and hive_on_tez_service_name != ''

- name: Check Hive On Tez is up and running
  uri:
    url: "{{ cloudera_manager_base_api_url }}/clusters/{{ cluster_base_name }}/services/{{ hive_on_tez_service_name }}"
    user: "{{ cloudera_manager_base_user }}"
    password: "{{ cloudera_manager_base_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: result
  until: result.json.serviceState == "STARTED"
  retries: 60
  delay: 10
  when: configure_observability_with_base and hive_on_tez_service_name != ''

- name: Restart Spark service
  uri:
    url: "{{ cloudera_manager_base_api_url }}/clusters/{{ cluster_base_name }}/services/{{ spark_service_name }}/commands/restart"
    user: "{{ cloudera_manager_base_user }}"
    password: "{{ cloudera_manager_base_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    validate_certs: no
    body_format: json
  when: configure_observability_with_base and spark_service_name != ''

- name: Pause to let CM acknowledges restart
  pause:
    seconds: 5
  when: configure_observability_with_base and spark_service_name != ''

- name: Check Spark is up and running
  uri:
    url: "{{ cloudera_manager_base_api_url }}/clusters/{{ cluster_base_name }}/services/{{ spark_service_name }}"
    user: "{{ cloudera_manager_base_user }}"
    password: "{{ cloudera_manager_base_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: result
  until: result.json.serviceState == "STARTED"
  retries: 60
  delay: 10
  when: configure_observability_with_base and spark_service_name != ''

- name: Restart Impala service
  uri:
    url: "{{ cloudera_manager_base_api_url }}/clusters/{{ cluster_base_name }}/services/{{ impala_service_name }}/commands/restart"
    user: "{{ cloudera_manager_base_user }}"
    password: "{{ cloudera_manager_base_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    validate_certs: no
    body_format: json
  when: configure_observability_with_base and impala_service_name != ''

- name: Pause to let CM acknowledges restart
  pause:
    seconds: 5
  when: configure_observability_with_base and impala_service_name != ''

- name: Check Impala is up and running
  uri:
    url: "{{ cloudera_manager_base_api_url }}/clusters/{{ cluster_base_name }}/services/{{ impala_service_name }}"
    user: "{{ cloudera_manager_base_user }}"
    password: "{{ cloudera_manager_base_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: result
  until: result.json.serviceState == "STARTED"
  retries: 60
  delay: 10
  when: configure_observability_with_base and impala_service_name != ''


# Restart observability

- name: Restart observability 
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/{{ observability_service_name }}/commands/restart"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: POST
    force_basic_auth: yes
    status_code: 200
    validate_certs: no
    body_format: json

- name: Pause to let CM acknowledges restart
  pause:
    seconds: 5
  when: configure_observability_with_base

- name: Check observability is up and running
  uri:
    url: "{{ cloudera_manager_api_url }}/clusters/{{ cluster_name }}/services/{{ observability_service_name }}"
    user: "{{ cloudera_manager_user }}"
    password: "{{ cloudera_manager_password }}"
    method: GET
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: no
    body_format: json
  register: result
  until: result.json.serviceState == "STARTED"
  retries: 60
  delay: 10
  when: configure_observability_with_base

